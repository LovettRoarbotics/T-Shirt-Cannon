package org.usfirst.frc.team5482.robot.subsystems;

import org.usfirst.frc.team5482.robot.Constants;
import org.usfirst.frc.team5482.robot.HardwareAdapter;
import org.usfirst.frc.team5482.robot.OI;
import org.usfirst.frc.team5482.robot.utilities.SystemManager;
import org.usfirst.frc.team5482.robot.utilities.SystemManager.RobotStatus;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class FiringSystem extends Subsystem {

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	SystemManager statusManager = new SystemManager("Cannon");

	public boolean fired;

	public enum CannonType {
		oneTank, twoTank
	}

	public void initDefaultCommand() {
	}

	public void fire() {
		if (OI.fireSafety.get() && statusManager.getStatus() == RobotStatus.OK) {
			HardwareAdapter.kFiringValve.set(1);
			Timer.delay(Constants.fireDelay);
			HardwareAdapter.kFiringValve.set(0);
			resetPressure();
		} else if (OI.fireSafety.get() && statusManager.getStatus() != RobotStatus.OK) {
			statusManager.setStatus(RobotStatus.ERROR);
			Timer.delay(0.5);
		}
	}

	public double getPressure() {
		return fireTankPressure(HardwareAdapter.kFireTankPressure.getVoltage());
	}

	private void resetPressure() {
		fired = true;
		log("Resetting Pressure...");
		setPressure(CannonType.oneTank);
		Timer.delay(0.01);
		fired = false;
	}

	public void setPressure(CannonType cannonType) {
		switch (cannonType) {
		case oneTank:
			if (fireTankPressure(HardwareAdapter.kOneTankPressure.getVoltage()) <= HardwareAdapter.kFiringPressure
					+ Constants.pressureOverage) {
				log("Tank Status", "Filling up tank...");
				statusManager.setStatus(RobotStatus.WARNING);
			} else {
				log("Tank Status", "Tank Full");
				statusManager.setStatus(RobotStatus.OK);
			}
			break;
		case twoTank:
			if (fireTankPressure(HardwareAdapter.kFireTankPressure.getVoltage()) <= HardwareAdapter.kFiringPressure
					+ Constants.pressureOverage) {
				HardwareAdapter.kRegulatorValve.set(true);
				log("Tank Status", "Filling up tank...");
				statusManager.setStatus(RobotStatus.WARNING);
			} else {
				HardwareAdapter.kRegulatorValve.set(false);
				log("Tank Status", "Tank Full");
				statusManager.setStatus(RobotStatus.OK);
			}
			break;
		default:
			SmartDashboard.putString("Firing System Error", "error: does not compute!");
			break;
		}
	}

	private void log(String message) {
		log("Pneumatic Status", message);
	}

	private void log(String system, String message) {
		SmartDashboard.putString(system, message);
	}

	private double fireTankPressure(double sensorIn) {
		double PSI;
		PSI = 250 * (sensorIn / 5) - 25;
		return PSI;

	}
}
